---
stages:
  - yaml-lint
  - markdown-lint
  - dockerfile-lint
  - helm-lint
  - build
  - push

global:
  - BUNDLE_IMAGE='smoloney/ci-actions-bundle:latest'
  - BUNDLE_IMAGE_COPYLEFT='smoloney/ci-actions-bundle-copyleft:latest'
  - INIT_IMAGES='docker pull "${BUNDLE_IMAGE}" && docker pull "${BUNDLE_IMAGE_COPYLEFT}"'
  - WORKSPACE='/ci-actions/workspace'

jobs:
  include:
    - stage: yaml-lint
      language: bash
      before_script:
        - eval "${INIT_IMAGES}"
      script:
        - |
          docker run --rm -v "${PWD}:${WORKSPACE}" "${BUNDLE_IMAGE_COPYLEFT}" \
          --exclude=./deployment/helm/templates \
          --file-glob='*.y*ml' \
          --exec-args='yamllint --strict --config-file=.yamllint.yml' && \

          docker run --rm -v "${PWD}:${WORKSPACE}" "${BUNDLE_IMAGE}" \
          --exclude=./deployment/helm/templates \
          --file-glob='*.y*ml' \
          --exec-args='prettier --check --parser yaml --config ./.prettierrc.yml'

    - stage: markdown-lint
      language: bash
      before_script:
        - eval "${INIT_IMAGES}"
      script:
        - |
          docker run --rm -v "${PWD}:${WORKSPACE}" "${BUNDLE_IMAGE}" \
            --exclude='./.github/pull_request_template.md' \
            --file-glob='*.md' \
            --exec-args='remark --frail --rc-path ./.remarkrc' \
            > /dev/null

    - stage: dockerfile-lint
      language: bash
      before_script:
        - eval "${INIT_IMAGES}"
      script:
        - |
          docker run --rm -v "${PWD}:${WORKSPACE}" "${BUNDLE_IMAGE_COPYLEFT}" \
            --file-glob='Dockerfile*' \
            --exec-args='hadolint --config ./.hadolint.yml'

    - stage: helm-lint
      language: bash
      image: docker:18-git
      before_script:
        - eval "${INIT_IMAGES}"
      script:
        - |
          docker run --rm -v "${PWD}:${WORKSPACE}" ${BUNDLE_IMAGE} \
            --exec-args='helm lint --strict ./deployment/helm'

    - &docker_prepare
      stage: build
      env:
        - DOCKERHUB_USERNAME=smoloney
        - DOCKERHUB_REPO=saleor
        - DOCKERHUB_URL="${DOCKERHUB_USERNAME}/${DOCKERHUB_REPO}"
        - SALEOR_BRANCH=master
      language: bash
      if: |
        branch != master
      before_script:
        - |
          git clone https://github.com/mirumee/saleor.git --branch=${SALEOR_BRANCH} &&
          cd saleor &&
          cp ../Dockerfile ./
      script:
        - |
          docker build --tag ${DOCKERHUB_URL}:local-only . &&
          docker run --rm ${DOCKERHUB_URL}:local-only /bin/bash -c 'echo "build ok"'

    - <<: *docker_prepare
      stage: push
      if: |
        branch = master
      before_script:
        - |
          git remote set-branches origin master && git fetch &&
          export git_diff=$(git diff-tree -r --name-only HEAD remotes/origin/master) &&
          git clone https://github.com/mirumee/saleor.git --branch=${SALEOR_BRANCH} &&
          cd saleor &&
          cp ../Dockerfile ./ &&
          export LATEST_SALEOR_TAG=$(git rev-parse $(git rev-parse HEAD)) &&
          export LATEST_SALEOR_TAG=${LATEST_SALEOR_TAG:0:6} &&
          export RECENTLY_BUILT_IMAGES=$(
            curl --silent https://hub.docker.com/v2/repositories/${DOCKERHUB_URL}/tags/ | \
            jq '.results | .[] | .name'
          ) &&
          echo ${git_diff} &&
          if [[ ${RECENTLY_BUILT_IMAGES} != "" && \
              ${RECENTLY_BUILT_IMAGES} == *"${LATEST_SALEOR_TAG}"* ]]; then
            if [[ "${git_diff}" != *"Dockerfile"* ]]; then
              export SKIP=true;
            fi
          fi
      script:
        - |
          if [[ -z ${SKIP} ]]; then
            echo "${DOCKERHUB_PASSWORD}" | \
            docker login -u "${DOCKERHUB_USERNAME}" --password-stdin
            docker build --tag ${DOCKERHUB_URL}:latest . &&
            docker tag ${DOCKERHUB_URL}:latest \
            ${DOCKERHUB_URL}:${SALEOR_BRANCH}-${LATEST_SALEOR_TAG} &&
            docker push ${DOCKERHUB_URL}:latest && docker push \
            ${DOCKERHUB_URL}:${SALEOR_BRANCH}-${LATEST_SALEOR_TAG}
          fi
