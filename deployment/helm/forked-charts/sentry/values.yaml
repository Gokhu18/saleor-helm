# Default values for sentry.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
image:
  repository: sentry
  tag: "9.0"
  pullPolicy: IfNotPresent
  # Add the secret name to pull from a private registry.
  imagePullSecrets: []
  # - name:

# Add an existing secret to override the {{ template "fullname" . }} secret files
existingSecret:

jobs:
  dbInit:
    weight:
    activeDeadlineSeconds: 900
    ttlSecondsAfterFinished: 120
    backOffLimit: 5
  createUser:
    weight:
    activeDeadlineSeconds: 120
    ttlSecondsAfterFinished: 120
    backOffLimit: 3
  createProject:
    weight:
    activeDeadlineSeconds: 120
    ttlSecondsAfterFinished: 120
    backOffLimit: 3

# How many web UI instances to run
web:
  replicacount: 1
  resources:
    limits:
      cpu: 500m
      memory: 500Mi
    requests:
      cpu: 300m
      memory: 300Mi
  env:
    - name: GITHUB_APP_ID
      value:
    - name: GITHUB_API_SECRET
      value:
  nodeSelector: {}
  tolerations: []
  affinity: {}
  ## Use an alternate scheduler, e.g. "stork".
  ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
  ##
  # schedulerName:


# How many cron instances to run
cron:
  replicacount: 1
  resources:
    limits:
      cpu: 200m
      memory: 200Mi
    requests:
      cpu: 100m
      memory: 100Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # schedulerName:

# How many worker instances to run
worker:
  replicacount: 2
  resources:
    limits:
      cpu: 300m
      memory: 500Mi
    requests:
      cpu: 100m
      memory: 100Mi
  nodeSelector: {}
  tolerations: []
  affinity: {}
  # schedulerName:

# Admin user to create
user:
  # Indicated to create the admin user or not,
  # Default is true as the initial installation.
  create: true
  email: admin@sentry.local
  # Project to create for user
  project:
    create: true
    name: sentry-project
    organization: Sentry
    team: Sentry
    # The public and private keys are uuids with dashes removed
    # Declaration of the public key and private key (as a secret) allows for
    # other apps to know the appropriate url to send error reports to
    # This is helpful for ci/devops.
    # Setting the publicKey and privateKey is optional
    publicKey:
    privateKey:

# BYO Email server
# TODO: Add exim4 template
# https://docs.sentry.io/server/installation/docker/#outbound-email
email:
  from_address: sentry@sentry.local
  host: smtp
  port: 25
  use_tls: false
  user:
  password:
  enable_replies: false

# Name of the service and what port to expose on the pod
# Don't change these unless you know what you're doing
service:
  name: sentry
  type: LoadBalancer
  externalPort: 9000
  internalPort: 9000
  ## External IP addresses of service
  ## Default: nil
  ##
  # externalIPs:
  # - 192.168.0.1

## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
##
persistence:
  enabled: true
  ## database data Persistent Volume Storage Class
  ## If defined, storageClassName: <storageClass>
  ## If set to "-", storageClassName: "", which disables dynamic provisioning
  ## If undefined (the default) or set to null, no storageClassName spec is
  ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
  ##   GKE, AWS & OpenStack)
  ##
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: 10Gi

  # Where to store sentry files
  # https://docs.sentry.io/server/filestore/
  filestore_dir: /var/lib/sentry/files

## Configure ingress resource that allow you to access the
## Sentry installation. Set up the URL
## ref: http://kubernetes.io/docs/user-guide/ingress/
##
ingress:
  enabled: false
  hostname: sentry.local

  ## Ingress annotations
  ##
  annotations: {}
  #   kubernetes.io/ingress.class: nginx
  #   kubernetes.io/tls-acme: 'true'

  ## Ingress TLS configuration
  ## Secrets must be manually created in the namespace
  ##
  tls: []
  #   - secretName: sentry.local-tls
  #     hosts:
  #       - sentry.local

# TODO: add support for plugins https://docs.sentry.io/server/plugins/

postgresql:
  ## global:
  ##   imageRegistry:
  image:
    registry: docker.io
    repository: bitnami/postgresql
    tag: 9.6.11
    pullPolicy: IfNotPresent
    # pullSecrets:
    #   - myRegistrKeySecretName
    debug: false
  volumePermissions:
    image:
      registry: docker.io
      repository: bitnami/minideb
      tag: latest
      pullPolicy: Always
    securityContext:
      runAsUser: 0
  securityContext:
    enabled: true
    fsGroup: 1001
    runAsUser: 1001
  replication:
    enabled: false
    user: repl_user
    password: repl_password
    slaveReplicas: 1
  postgresqlUsername: postgres
  postgresqlDatabase: sentry
  # postgresqlPassword:
  # postgresqlConfiguration:
  # terminationGracePeriodSeconds: 30
  service:
    type: ClusterIP
    port: 5432
    # nodePort:
    annotations: {}
    # loadBalancerIP:
  persistence:
    enabled: false
    # existingClaim:
    mountPath: /bitnami/postgresql
    # storageClass: "-"
    accessModes:
      - ReadWriteOnce
    size: 8Gi
    annotations: {}
  updateStrategy:
    type: RollingUpdate
  master:
    nodeSelector: {}
    affinity: {}
    tolerations: []
  slave:
    nodeSelector: {}
    affinity: {}
    tolerations: []
  resources:
    requests:
      memory: 256Mi
      cpu: 250m
  networkPolicy:
    enabled: false
    allowExternal: true
  livenessProbe:
    enabled: true
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  readinessProbe:
    enabled: true
    initialDelaySeconds: 5
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 6
    successThreshold: 1
  metrics:
    enabled: false
    # resources: {}
    service:
      type: ClusterIP
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9187"
      loadBalancerIP:
    image:
      registry: docker.io
      repository: wrouesnel/postgres_exporter
      tag: v0.4.6
      pullPolicy: IfNotPresent
      # pullSecrets:
      #   - myRegistrKeySecretName
    livenessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 6
      successThreshold: 1
    readinessProbe:
      enabled: true
      initialDelaySeconds: 5
      periodSeconds: 10
      timeoutSeconds: 5
      failureThreshold: 6
      successThreshold: 1
  extraEnv: {}

redis:
  persistence:
    enabled: true

config:
  configYml: ""
  sentryConfPy: ""
